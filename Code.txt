package com.hotel;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class HotelManagementApplication {

	public static void main(String[] args) {
		SpringApplication.run(HotelManagementApplication.class, args);
	}

}

package com.hotel.constants;

public class HotelConstants {
	public static final String SOMETHING_WENT_WRONG="Something went Wrong.";
	public static final String INVALID_DATA="Invalid Data.";
	public static final String UNAUTHORIZED_ACCESS="Unauthorized Access.";

}

package com.hotel.dao;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.repository.query.Param;

import com.hotel.POJO.User;
import com.hotel.wrapper.UserWrapper;

import jakarta.transaction.Transactional;

//JpaRepository is a Spring Data interface that provides basic CRUD operations (like save(), findById(), delete(), etc.) so you don't have to write them yourself.
public interface UserDao extends JpaRepository<User,Integer>{
	//By extending JpaRepository<User, Integer>, it automatically inherits all CRUD methods for the User entity whose primary key (id) is of type Integer.
	User findByEmailId(@Param("email") String email);
	
	List<UserWrapper> getAllUsers();
	
	List<String> getAllAdmin();

	@Transactional
	@Modifying
	Integer updateStatus(@Param("status") String status, @Param("id") Integer id);
}

package com.hotel.JWT;

import java.util.ArrayList;
import java.util.Objects;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

import com.hotel.dao.UserDao;

import org.slf4j.LoggerFactory;
import lombok.extern.slf4j.Slf4j;

@Slf4j // Enables Lombok-based logging via SLF4J
@Service // Tells Spring that this is a service bean
public class CustomerUserDetailsService implements UserDetailsService {
	private static final org.slf4j.Logger logger = LoggerFactory.getLogger(CustomerUserDetailsService.class);

	@Autowired // Injects your DAO to access user data. Used to fetch user data from the
				// database.
	UserDao userDao;

	private com.hotel.POJO.User userDetail; // Temporarily stores the full user object for later use (e.g., in UserServiceImpl).

	@Override
	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
		// Called by Spring Security to load a user by email/username. This is the core method Spring Security calls during authentication.
		logger.info("Inside loadUserByUsername {}", username);
		userDetail = userDao.findByEmailId(username); // Fetches the user from DB.
		if (!Objects.isNull(userDetail))
			return new User(userDetail.getEmail(), userDetail.getPassword(), new ArrayList<>());
		// Wraps the user into Spring Security's own User object. The third param is a
		// list of roles—empty for now.
		else
			throw new UsernameNotFoundException("User not found.");
	}

	public com.hotel.POJO.User getUserDetail() { // Allows external access to the full user object—not just Spring's subset.
		return userDetail;
	}

}

package com.hotel.JWT;

import java.io.IOException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;


import io.jsonwebtoken.Claims;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

@Component
public class JwtFilter extends OncePerRequestFilter {
	//Spring will auto-register this filter. OncePerRequestFilter ensures it's run once per request.
	@Autowired
	private JwtUtil jwtUtil; // Used to parse, extract, and validate JWTs.

	@Autowired
	private CustomerUserDetailsService service; //Helps retrieve user details for Spring Security.

	Claims claims = null; //Full payload of the JWT.
	private String userName = null; //Extracted subject (usually email) from the token.

	@Override
	protected void doFilterInternal(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse,
			FilterChain filterChain) throws ServletException, IOException {
		
		if (httpServletRequest.getServletPath().matches("/user/login | /user/forgotPassword | /user/signup")) { //Allows unauthenticated access to public endpoints.
			filterChain.doFilter(httpServletRequest, httpServletResponse);
		} else {
			String authorizationHeader = httpServletRequest.getHeader("Authorization"); //Extracts the JWT from the Authorization header.
			String token = null;
			if (authorizationHeader != null && authorizationHeader.startsWith("Bearer ")) {
				token = authorizationHeader.substring(7); //Skips "Bearer " prefix to isolate the token.
				userName = jwtUtil.extractUsername(token); //Extracts email/username and role from the token.
				claims = jwtUtil.extractAllClaims(token);

			}
			if (userName != null && SecurityContextHolder.getContext().getAuthentication() == null) { //Ensures no other authentication is already set.
				UserDetails userDetails = service.loadUserByUsername(userName); //Loads user again to validate the token.
				if (jwtUtil.validateToken(token, userDetails)) {
					UsernamePasswordAuthenticationToken usernamePasswordAuthenticationToken = new UsernamePasswordAuthenticationToken(
							userDetails, null, userDetails.getAuthorities());
					usernamePasswordAuthenticationToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(httpServletRequest));
					SecurityContextHolder.getContext().setAuthentication(usernamePasswordAuthenticationToken); 
					//Spring Security will now treat this user as authenticated for the rest of the request lifecycle.

				}
			}
			filterChain.doFilter(httpServletRequest, httpServletResponse); //Continues request processing after successful authentication.
 
		}
		

	}
	//Used to check role-based access elsewhere in code.
	public boolean isAdmin(){
		return "admin".equalsIgnoreCase((String) claims.get("role"));
	}
	public boolean isUser(){
		return "user".equalsIgnoreCase((String) claims.get("role"));
	}
	public String getCurrentUser() {
		return userName;
	}
}

	package com.hotel.JWT;
	
	import java.util.Date;
	import java.util.HashMap;
	import java.util.Map;
	import java.util.function.Function;
	
	import org.springframework.security.core.userdetails.UserDetails;
	import org.springframework.stereotype.Service;
	
	import io.jsonwebtoken.Claims;
	import io.jsonwebtoken.Jwts;
	import io.jsonwebtoken.SignatureAlgorithm;
	
	@Service
	public class JwtUtil {
		private String secret = "NandeeshYRNandeeshYRNandeeshYRNandeeshYRNandeeshYR"; //This is the secret key used to sign and verify JWTs.
	
		public String extractUsername(String token) { // Pulls the email (subject) from the token.
			return extractClaims(token, Claims::getSubject);
		}
	
		public Date extractExpiration(String token) {
			return extractClaims(token, Claims::getExpiration);
		}
	
		public <T> T extractClaims(String token, Function<Claims, T> claimsResolver) { //Generic method to extract specific fields from the JWT.
			final Claims claims = extractAllClaims(token);
			return claimsResolver.apply(claims);
		}
	
		public Claims extractAllClaims(String token) { // Parses and returns the full token payload (iat, exp, role, etc.).
			return Jwts.parser().setSigningKey(secret).parseClaimsJws(token).getBody();
		}
	
		private Boolean isTokenExpired(String token) {
			return extractExpiration(token).before(new Date());
		}
	
		public String generateToken(String username, String role) { //Creates a token with email and role embedded as claims.
			Map<String, Object> claims = new HashMap<>();
			claims.put("role", role);
			return createToken(claims, username);
		}
	
		private String createToken(Map<String, Object> claims, String subject) {
			return Jwts.builder().setClaims(claims).setSubject(subject).setIssuedAt(new Date(System.currentTimeMillis())) //Sets token lifetime (10 hours here).
					.setExpiration(new Date(System.currentTimeMillis() + 1000 * 60 * 60 * 10))
					.signWith(SignatureAlgorithm.HS256, secret).compact(); //Hashes the token using HS256 and your secret.
		}
	
		public Boolean validateToken(String token, UserDetails userDetails) { //Returns true only if the token isn’t expired and belongs to the given user.
			final String username = extractUsername(token);
			return (username.equals(userDetails.getUsername()) && !isTokenExpired(token));
		}
	}

package com.hotel.JWT;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.web.cors.CorsConfiguration;

@Configuration
@EnableWebSecurity //Registers this class as a config and turns on web security.
public class SecurityConfig {

	@Autowired
	private CustomerUserDetailsService customerUserDetailsService;

	@Autowired
	JwtFilter jwtFilter;

	@Bean
	public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception { //Defines your custom security rules.
		http.csrf(csrf -> csrf.disable())
				.cors(cors -> cors.configurationSource(request -> new CorsConfiguration().applyPermitDefaultValues()))
				.authorizeHttpRequests(
						auth -> auth.requestMatchers("/user/login", "/user/signup", "/user/forgotPassword").permitAll() //Public endpoints—no token required.
								.anyRequest().authenticated())															//All other endpoints need a valid JWT.
				.sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))	//Each request must carry its own token—no sessions or cookies.
				.addFilterBefore(jwtFilter, UsernamePasswordAuthenticationFilter.class);						//Ensures your JWT filter runs before the default login process.

		return http.build();
	}

	@Bean
	public AuthenticationManager authenticationManager(AuthenticationConfiguration config) throws Exception {
		return config.getAuthenticationManager();
	}

	@Bean
	public DaoAuthenticationProvider authenticationProvider() { //Tells Spring Security to use our custom UserDetailsService and BCryptPasswordEncoder for authentication.
		DaoAuthenticationProvider provider = new DaoAuthenticationProvider();
		provider.setUserDetailsService(customerUserDetailsService);
		provider.setPasswordEncoder(passwordEncoder());
		return provider;
	}

	@Bean
	public BCryptPasswordEncoder passwordEncoder() {
	    return new BCryptPasswordEncoder();
	}
}

package com.hotel.POJO; //Defines the package structure for better organization. POJO stands for "Plain Old Java Object" — a simple Java class without any heavy dependencies.

import java.io.Serializable; //Implements serialization so the object can be converted to bytes — useful for caching, network transfers, or saving state.

import org.hibernate.annotations.DynamicInsert; //Hibernate-specific annotations to optimize SQL operations: only non-null fields are inserted or updated.
import org.hibernate.annotations.DynamicUpdate;

import jakarta.persistence.*; //These are JPA annotations for ORM (Object-Relational Mapping) — used to map the class and its fields to a database table.

import lombok.Data; //auto-generates boilerplate code — like getters, setters, toString(), etc., via the @Data annotation.

@NamedQuery(name="User.findByEmailId", query="select u from User u where u.email=:email")

@NamedQuery(name="User.getAllUsers", query="select new com.hotel.wrapper.UserWrapper(u.id,u.name,u.email,u.contactNumber,u.status) from User u where u.role='user'")

@NamedQuery(name="User.updateStatus", query="update User u set u.status=:status where u.id=:id")

@NamedQuery(name="User.getAllAdmin", query="select u.email from User u where u.role='admin'")

@Data /*Generates constructors, getters, setters, toString(), equals(), and hashCode() methods automatically. No need for manually defining these methods(removes below commented part).*/
@Entity // Marks this class as a JPA entity, meaning it will be mapped to a database table.
@DynamicInsert /*Ensures only non-null values are included in INSERT queries. Prevents default values in the database from being overridden.*/
@DynamicUpdate /*Ensures only changed values are included in UPDATE queries. Optimizes database operations by preventing unnecessary updates.*/
@Table(name = "user") // Creates DB table with this
public class User implements Serializable {

	private static final long serialVersionUID = 1L;

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY) 
	/*Defines how the primary key is generated. IDENTITY means the database will automatically generate the ID (e.g., auto-increment in MySQL).*/
	@Column(name = "id")
	private Integer id;

	@Column(name = "name")
	private String name;

	@Column(name = "contactNumber")
	private String contactNumber;

	@Column(name = "email")
	private String email;

	@Column(name = "password")
	private String password;

	@Column(name = "status")
	private String status;

	@Column(name = "role")
	private String role;


	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getContactNumber() {
		return contactNumber;
	}

	public void setContactNumber(String contactNumber) {
		this.contactNumber = contactNumber;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public String getStatus() {
		return status;
	}

	public void setStatus(String status) {
		this.status = status;
	}

	public String getRole() {
		return role;
	}

	public void setRole(String role) {
		this.role = role;
	}

	public static long getSerialversionuid() {
		return serialVersionUID;
	}
	
}

package com.hotel.rest;

import java.util.List;
///This is a REST controller interface that defines the API contract
import java.util.Map;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;

import com.hotel.wrapper.UserWrapper;

@RequestMapping(path = "/user") // meaning all endpoints will be prefixed with /user.
public interface UserRest {

	@PostMapping(path = "/signup")
	public ResponseEntity<String> signUp(@RequestBody(required = true) Map<String, String> requestMap);
	// ResponseEntity<T> is a Spring class used to return HTTP responses with status codes and body content. //signUp(...) → The method name that defines a signup endpoint.
	//@RequestBody is a Spring annotation that tells Spring to map the request’s JSON body into the method argument. 
	//required = true means that the request must contain a body, or an error will be thrown. Map<String, String> requestMap →This parameter stores JSON request data as a key-value pair.
	
	@PostMapping(path = "/login")
	public ResponseEntity<String> login(@RequestBody(required = true) Map<String, String> requestMap);
	
	//Added Manually to list users
	@GetMapping(path = "/get")
	public ResponseEntity<List<UserWrapper>> getAllUsers();
	
	@PostMapping(path = "/update")
	public ResponseEntity<String> update(@RequestBody(required = true) Map<String, String> requestMap);
}

package com.hotel.restImpl;

import java.util.ArrayList;
import java.util.List;
//This class implements UserRest and provides the actual logic for handling the signup request
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RestController;

import com.hotel.constants.HotelConstants;
import com.hotel.rest.UserRest;
import com.hotel.service.UserService;
import com.hotel.utils.HotelUtils;
import com.hotel.wrapper.UserWrapper;


@RestController // it will handle HTTP requests, making it a Spring MVC controller that handles HTTP requests.
public class UserRestImpl implements UserRest {
	@Autowired // Uses Dependency Injection - It automatically injects UserService, which likely handles business logic related to users.
	UserService userService;

	@Override
	public ResponseEntity<String> signUp(Map<String, String> requestMap) {
		try {
			return userService.signUp(requestMap); // Implements signUp(), calling userService.signUp(requestMap),
													// meaning the actual signup logic is in UserService.
		} catch (Exception ex) {
			ex.printStackTrace();
		}
		return HotelUtils.getResponseEntity(HotelConstants.SOMETHING_WENT_WRONG, HttpStatus.INTERNAL_SERVER_ERROR);
	}

	// Added Manually to list users.
	public ResponseEntity<List<UserWrapper>> getAllUsers() {
		try {
			return userService.getAllUsers();// Implements signUp(), calling userService.signUp(requestMap), meaning the
												// actual signup logic is in UserService.

		} catch (Exception ex) {
			ex.printStackTrace();
		}
		return new ResponseEntity<List<UserWrapper>>(new ArrayList<>(), HttpStatus.INTERNAL_SERVER_ERROR);
	}// Added Manually to list users

	@Override
	public ResponseEntity<String> login(Map<String, String> requestMap) {
		try {
			return userService.login(requestMap);
		} catch (Exception ex) {
			ex.printStackTrace();
		}
		return HotelUtils.getResponseEntity(HotelConstants.SOMETHING_WENT_WRONG, HttpStatus.INTERNAL_SERVER_ERROR);
	}

	@Override
	public ResponseEntity<String> update(Map<String, String> requestMap) {
		try {
			return userService.update(requestMap);
		} catch (Exception ex) {
			ex.printStackTrace();
		}
		return HotelUtils.getResponseEntity(HotelConstants.SOMETHING_WENT_WRONG, HttpStatus.INTERNAL_SERVER_ERROR);
	}
}

package com.hotel.service;

import java.util.List;
import java.util.Map;

import org.springframework.http.ResponseEntity;

import com.hotel.wrapper.UserWrapper;

public interface UserService {

	ResponseEntity<String> signUp(Map<String, String> requestMap);
	
	//Added Manually to list users
	ResponseEntity<List<UserWrapper>> getAllUsers();

	ResponseEntity<String> login(Map<String, String> requestMap);

	ResponseEntity<String> update(Map<String, String> requestMap);

}
	

package com.hotel.serviceImpl;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

import org.springframework.security.authentication.AuthenticationManager;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import com.hotel.JWT.CustomerUserDetailsService;
import com.hotel.JWT.JwtFilter;
import com.hotel.JWT.JwtUtil;
import com.hotel.POJO.User;
import com.hotel.constants.HotelConstants;
import com.hotel.dao.UserDao;
import com.hotel.service.UserService;
import com.hotel.utils.EmailUtils;
import com.hotel.utils.HotelUtils;
import com.hotel.wrapper.UserWrapper;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service // Marks the class as a service component in Spring — it houses the business
			// logic.
public class UserServiceImpl implements UserService {
	private static final Logger logger = LoggerFactory.getLogger(UserServiceImpl.class);

	@Autowired // UserDao is injected here to perform database operations using JPA (like
				// checking and saving users).
	UserDao userDao; // userDao is a gateway or bridge to the database.

	@Autowired
	CustomerUserDetailsService customerUserDetailsService;

	@Autowired
	JwtUtil jwtUtil;

	@Autowired
	AuthenticationManager authenticationManager;

	@Autowired
	private BCryptPasswordEncoder passwordEncoder;

	@Autowired
	JwtFilter jwtFilter;
	
	@Autowired
	EmailUtils emailUtils;

	@Override // Accepts user data from the Controller as a Map<String, String>, where keys
				// are like "email", "password" etc. Returns a ResponseEntity<String> — Spring’s
				// HTTP response wrapper.
	public ResponseEntity<String> signUp(Map<String, String> requestMap) {
		// requestMap is a Java Map<String, String> object that acts as a container for
		// data sent from the client during a signup request.
		logger.info("Inside signUp {}", requestMap);
		try {
			if (validateSignUpMap(requestMap)) {
				User user = userDao.findByEmailId(requestMap.get("email")); // Searches DB for an existing user by
																			// email.
				if (Objects.isNull(user)) {
					userDao.save(getUserFromMap(requestMap));
					return HotelUtils.getResponseEntity("Successfully Registered", HttpStatus.OK);
				} else {
					return HotelUtils.getResponseEntity("Email already exists", HttpStatus.BAD_REQUEST);
				}
			} else {
				return HotelUtils.getResponseEntity(HotelConstants.INVALID_DATA, HttpStatus.BAD_REQUEST);
			}
		} catch (Exception ex) {
			ex.printStackTrace();
		}
		return HotelUtils.getResponseEntity(HotelConstants.SOMETHING_WENT_WRONG, HttpStatus.INTERNAL_SERVER_ERROR);

	}

	private boolean validateSignUpMap(Map<String, String> requestMap) {
		if (requestMap.containsKey("name") && requestMap.containsKey("contactNumber") && requestMap.containsKey("email")
				&& requestMap.containsKey("password")) {
			return true;
		}
		return false;
	}

	private User getUserFromMap(Map<String, String> requestMap) {
		User user = new User();
		user.setName(requestMap.get("name"));
		user.setContactNumber(requestMap.get("contactNumber"));
		user.setEmail(requestMap.get("email"));
		user.setPassword(passwordEncoder.encode(requestMap.get("password")));// user.setPassword(requestMap.get("password"));
		user.setStatus("false");
		user.setRole("user");

		return user;
	}

	// Added Manually to list users
	@Override
	public ResponseEntity<List<UserWrapper>> getAllUsers() {
		try {
			if (jwtFilter.isAdmin()) {
				return new ResponseEntity<>(userDao.getAllUsers(), HttpStatus.OK);
			} else {
				return new ResponseEntity<>(new ArrayList<>(), HttpStatus.UNAUTHORIZED);
			}
		} catch (Exception e) {
			e.printStackTrace();
			return new ResponseEntity<>(new ArrayList<>(), HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}// Added Manually to list users

	@Override
	public ResponseEntity<String> login(Map<String, String> requestMap) {
		logger.info("Inside Login {}", requestMap);
		try { // like Authentication auth = authenticationManager.authenticate(token)
			Authentication auth = authenticationManager.authenticate(
					new UsernamePasswordAuthenticationToken(requestMap.get("email"), requestMap.get("password")));
			if (auth.isAuthenticated()) {
				if (customerUserDetailsService.getUserDetail().getStatus().equalsIgnoreCase("true")) {
					return new ResponseEntity<String>(
							"{\"token\":\""
									+ jwtUtil.generateToken(customerUserDetailsService.getUserDetail().getEmail(),
											customerUserDetailsService.getUserDetail().getRole())
									+ "\"}",
							HttpStatus.OK);
				} else {
					return new ResponseEntity<String>("{\"message\":\"" + "Wait for admin approval." + "\"}",
							HttpStatus.BAD_REQUEST);
				}
			}

		} catch (Exception ex) {
			logger.error("{}", ex);
		}
		return new ResponseEntity<String>("{\"message\":\"" + "Bad Credentials." + "\"}", HttpStatus.BAD_REQUEST);
	}

	@Override
	public ResponseEntity<String> update(Map<String, String> requestMap) {
		try {
			if (jwtFilter.isAdmin()) {
				Optional<User> optional = userDao.findById(Integer.parseInt(requestMap.get("id")));
				if (!optional.isEmpty()) {
					userDao.updateStatus(requestMap.get("status"),Integer.parseInt(requestMap.get("id")));
					sendMailToAllAdmin(requestMap.get("status"),optional.get().getEmail(),userDao.getAllAdmin());
					return HotelUtils.getResponseEntity("User status updated successfully.", HttpStatus.OK);
				} else {
					HotelUtils.getResponseEntity("User Id does not exist.", HttpStatus.OK);
				}
			} else {
				return HotelUtils.getResponseEntity(HotelConstants.UNAUTHORIZED_ACCESS, HttpStatus.UNAUTHORIZED);
			}
		} catch (Exception ex) {
			ex.printStackTrace();
		}
		return HotelUtils.getResponseEntity(HotelConstants.SOMETHING_WENT_WRONG, HttpStatus.INTERNAL_SERVER_ERROR);
	}

	private void sendMailToAllAdmin(String status, String user, List<String> allAdmin) {
		allAdmin.remove(jwtFilter.getCurrentUser());
		if(status!=null && status.equalsIgnoreCase("true")) {
			emailUtils.sendSimpleMessage(jwtFilter.getCurrentUser(), "Account Approved.","USER:- "+user+" \n is approved by \n ADMIN:- "+jwtFilter.getCurrentUser(), allAdmin);
		}else {
			emailUtils.sendSimpleMessage(jwtFilter.getCurrentUser(), "Account Disabled.","USER:- "+user+" \n is disabled by \n ADMIN:- "+jwtFilter.getCurrentUser(), allAdmin);
		}
		
	}
}

package com.hotel.utils;


import java.util.List;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.MailException;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.stereotype.Service;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
public class EmailUtils {

	@Autowired
	private JavaMailSender eMailSender;

	public void sendSimpleMessage(String to, String subject, String text, List<String> list) {
		SimpleMailMessage message = new SimpleMailMessage();
		message.setFrom("nandyr183@gmail.com");
		message.setTo(to);
		message.setSubject(subject);
		message.setText(text);
		if (list != null && list.size() > 0) {
			message.setCc(getCcArray(list));
		}
		eMailSender.send(message);
		try {
			eMailSender.send(message);
		} catch (MailException ex) {
		    System.out.printf("Email sending failed: {}", ex.getMessage());
		}

	}

	private String[] getCcArray(List<String> ccList) {
		String[] cc = new String[ccList.size()];
		for (int i = 0; i < ccList.size(); i++) {
			cc[i] = ccList.get(i);

		}
		return cc;
	}
}

package com.hotel.utils;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

public class HotelUtils {

	private HotelUtils() {
		
	}
	public static ResponseEntity<String> getResponseEntity(String responseMessage, HttpStatus httpStatus){
		return new ResponseEntity<String>("{\"message\":\""+responseMessage+"\"}",httpStatus);
	}
}

package com.hotel.wrapper;

import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
public class UserWrapper {
	

	
	private Integer id;
	private String name;
	private String email;
	private String contactNumber;
	private String status;
	
	public UserWrapper(Integer id, String name, String email, String contactNumber, String status) {
		super();
		this.id = id;
		this.name = name;
		this.email = email;
		this.contactNumber = contactNumber;
		this.status = status;
	}

	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public String getContactNumber() {
		return contactNumber;
	}

	public void setContactNumber(String contactNumber) {
		this.contactNumber = contactNumber;
	}

	public String getStatus() {
		return status;
	}

	public void setStatus(String status) {
		this.status = status;
	}
	
}

